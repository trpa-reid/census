PCF_VIOL_CATEGORY=="05" ~ "Wrong Side of Road",
PCF_VIOL_CATEGORY=="06" ~ "Improper Passing",
PCF_VIOL_CATEGORY=="07" ~ "Unsafe Lane Change",
PCF_VIOL_CATEGORY=="08" ~ "Improper Turning",
PCF_VIOL_CATEGORY=="09" ~ "Auotomobile Right of Way",
PCF_VIOL_CATEGORY=="10" ~ "Pedestrian Right of Way",
PCF_VIOL_CATEGORY=="11" ~ "Pedestrian Violation",
PCF_VIOL_CATEGORY=="12" ~ "Traffic Signals and Signs",
PCF_VIOL_CATEGORY=="13" ~ "Hazardous Parking",
PCF_VIOL_CATEGORY=="17" ~ "Other Hazardous Violation",
PCF_VIOL_CATEGORY=="18" ~ "Other Than Driver or Pedestrian",
PCF_VIOL_CATEGORY=="21" ~ "Unsafe Backing or Starting",
PCF_VIOL_CATEGORY=="22" ~ "Other Improper Driving"),
road_surface = case_when(ROAD_SURFACE== "A" ~ "Dry",
ROAD_SURFACE== "B" ~ "Wet",
ROAD_SURFACE== "C" ~ "Snowy or Icy",
ROAD_SURFACE== "D" ~ "Slippery (Muddy, Oily, etc.)",
ROAD_SURFACE== "-" ~ "Not Stated"),
road_condition_1= case_when(ROAD_COND_1=="A" ~ "Holes, Deep Ruts",
ROAD_COND_1=="B" ~ "Loose Material on Roadway",
ROAD_COND_1=="C" ~ "Obstruction on Roadway",
ROAD_COND_1=="D" ~ "Construction or Repair Zone",
ROAD_COND_1=="E" ~ "Reduced Roadway Width",
ROAD_COND_1=="F" ~ "Flooded",
ROAD_COND_1=="G" ~ "Other",
ROAD_COND_1=="H" ~ "No Unusual Condition",
ROAD_COND_1=="-" ~ "Not Stated"),
road_condition_2= case_when(ROAD_COND_2=="A" ~ "Holes, Deep Ruts",
ROAD_COND_2=="B" ~ "Loose Material on Roadway",
ROAD_COND_2=="C" ~ "Obstruction on Roadway",
ROAD_COND_2=="D" ~ "Construction or Repair Zone",
ROAD_COND_2=="E" ~ "Reduced Roadway Width",
ROAD_COND_2=="F" ~ "Flooded",
ROAD_COND_2=="G" ~ "Other",
ROAD_COND_2=="H" ~ "No Unusual Condition",
ROAD_COND_2=="-" ~ "Not Stated"),
pedestrian= case_when(PED_ACTION=="A" ~ "No Pedestrian Involved",
PED_ACTION=="B" ~ "Crossing in Crosswalk at Intersection",
PED_ACTION=="C" ~ "Crossing in Crosswalk Not at Intersection",
PED_ACTION=="D" ~ "Crossing Not in Crosswalk",
PED_ACTION=="E" ~ "In Road, Including Shoulder",
PED_ACTION=="F" ~ "Not in Road",
PED_ACTION=="G" ~ "Approaching/Leaving School Bus",
PED_ACTION== "-" ~ "Not Stated"),
bike_ped_involved=case_when(PEDESTRIAN_ACCIDENT=="Y" ~ "pedestrian",
BICYCLE_ACCIDENT=="Y" ~ "bicycle",
TRUE~ as.character("none"))) %>%
st_join(corridors) %>%
rename(date= COLLISION_DATE, time=COLLISION_TIME) %>%
mutate(date=as.Date(date, format="%Y-%m-%d"),
data_source="CALTRANS") %>%
select(id_name, data_source,date,time, crash_severity,road_condition_1,road_surface,violation,weather_1,lighting,crash_type,bike_ped_involved)
caltrans <-bind_cols(trpa_clean, data.frame(st_coordinates(trpa_clean))) %>%
rename(lon=X, lat=Y) %>%
data.frame() %>% select(-geometry) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326)
#######
ndot1<-read_csv("H:/lt-info/work_order_8_18/TRPA CRASHES 2012-2017 R HAEFER.csv")
ndot<-read_csv("H:/lt-info/work_order_8_18/TRPA CRASHES 2012-2017 R HAEFER.csv") %>%
filter(!is.na(X)) %>%
st_as_sf(coords = c("X", "Y"), crs = 26911) %>%
st_transform(crs=4326) %>%
st_join(corridors) %>%
separate(Weather, into=c("weather_1", "weather_2"), sep=":") %>%
mutate(crash_type= case_when(`Crash Type`=="ANGLE" ~ "Angle-Broadside",
`Crash Type`=="BACKING" ~ "Backing",
`Crash Type`=="HEAD-ON" ~ "Head-On",
`Crash Type`=="NON-COLLISION" ~ "Non-Collision",
`Crash Type`=="REAR-END" ~ "Rear-End",
`Crash Type`=="REAR-TO-REAR" ~ "Other",
`Crash Type`=="SIDESWIPE, MEETING" ~ "Sideswipe",
`Crash Type`=="SIDESWIPE, OVERTAKING" ~ "Sideswipe",
`Crash Type`=="UNKNOWN" ~ "Unknown",
TRUE ~ NA_character_),
lighting=case_when(Lighting == "DAYLIGHT" ~ "Daylight",
Lighting %in% c ("DARK - CONTINUOUS LIGHTING",
"DARK - SPOT LIGHTING") ~ "Dark - Street Lights",
Lighting == "DARK - NO LIGHTING" ~ "Dark - No Street Lights",
Lighting == "DARK - UNKNOWN LIGHTING" ~ "Dark - Unknown Lighting",
Lighting %in% c ("DAWN","DUSK") ~ "Dusk - Dawn",
Lighting == "NA" ~ "Not Stated",
Lighting %in% c( "UNKNOWN", "OTHER") ~ "Unknown",
TRUE ~ NA_character_),
weather_1 = case_when(weather_1 == "NA" ~ "Not Stated",
weather_1 == "RAIN" ~ "Raining",
weather_1 == "SNOW" ~ "Snowing",
weather_1 == "CLEAR" ~ "Clear",
weather_1 == "CLOUDY" ~ "Cloudy",
weather_1 == "FOG" ~ "Fog",
weather_1 %in% c("UNKNOWN", "OTHER") ~ "Other",
weather_1 == "BLOWING SAND, SOIL, DIRT, SNOW" ~ "Windy",
weather_1 == "FOG, SMOG, SMOKE" ~ "Fog",
TRUE ~ NA_character_),
weather_2 = case_when(weather_2 == "NA" ~ "Not Stated",
weather_2 == "RAIN" ~ "Raining",
weather_2 == "SNOW" ~ "Snowing",
weather_2 == "CLEAR" ~ "Clear",
weather_2 == "CLOUDY" ~ "Cloudy",
weather_2 == "FOG" ~ "Fog",
weather_2 %in% c("UNKNOWN", "OTHER") ~ "Other",
weather_2 == "BLOWING SAND, SOIL, DIRT, SNOW" ~ "Windy",
weather_2 == "FOG, SMOG, SMOKE" ~ "Fog",
TRUE ~ NA_character_),
road_surface = case_when(`Factors Roadway` %in% c("ICE","SNOW","ICE: DRY") ~
"Snowy or Icy",
`Factors Roadway` %in% c("OTHER", "OTHER: DRY") ~
"Other",
`Factors Roadway` == "WET" ~ "Wet",
`Factors Roadway` == "DRY" ~ "Dry",
`Factors Roadway` == "NA" ~ "Not Stated",
TRUE ~ NA_character_),
road_condition_1 = case_when(`HWY Factors` %in% c("WET, ICY, SNOW, SLUSH",
"WEATHER: DEBRIS: ROAD OBSTRUCTION: WET, ICY, SNOW, SLUSH",
"WEATHER: WET, ICY, SNOW, SLUSH",
"WEATHER: WET, ICY, SNOW, SLUSH: OTHER HIGHWAY",
"WEATHER") ~ "Weather",
`HWY Factors` == "UNKNOWN" ~ "Unknown",
`HWY Factors` %in% c("GLARE", "OTHER ENVIRONMENTAL", "OTHER HIGHWAY","SHOULDERS: OTHER HIGHWAY: OTHER ENVIRONMENTAL") ~ "Other",
`HWY Factors` %in% c("DEBRIS", "DEBRIS: ROAD OBSTRUCTION","DEBRIS: ROAD OBSTRUCTION: WET, ICY, SNOW, SLUSH","DEBRIS: WET, ICY, SNOW, SLUSH","ROAD OBSTRUCTION") ~ "Loose Material on Roadway",
`HWY Factors` %in% c("ACTIVE WORK ZONE","INACTIVE WORK ZONE") ~ "Construction or Repair Zone",
`HWY Factors` == "NONE" ~ "No Unusual Condition",
`HWY Factors` %in% c("ANIMAL IN ROADWAY","ANIMAL IN ROADWAY: OTHER HIGHWAY","WET, ICY, SNOW, SLUSH: ANIMAL IN ROADWAY") ~ "Wildlife",
`HWY Factors`== "RUTS, HOLES, BUMPS" ~ "Holes, Deep Ruts",
TRUE ~ NA_character_),
crash_severity = case_when(`Crash Severity`=="FATAL CRASH" ~ "fatal",
`Crash Severity`=="INJURY CRASH" & `Injury Type` =="K" ~ "fatal",
`Crash Severity`=="INJURY CRASH" & `Injury Type` =="A" ~ "severe injury",
`Crash Severity`=="INJURY CRASH" & `Injury Type` =="B" ~ "other visible injury",
`Crash Severity`=="INJURY CRASH" & `Injury Type` =="C" ~ "complaint of pain",
`Crash Severity`=="PROPERTY DAMAGE ONLY" ~ "property damage only", TRUE ~ NA_character_),
violation= stri_trans_totitle(gsub("\\:.*","",`V1 Vehicle Factors`)),
bike_ped_involved=NA) %>%
rename(date=`Crash Date`) %>%
mutate(date=as.Date(date, format="%d-%b-%Y"),
pedestrian=NA,
road_condition_2=NA,
data_source="NDOT",
time=gsub(":" ,"",stri_sub(`Crash Time`, 1, -4))) %>%
select(id_name, data_source, date, time, crash_severity, road_condition_1, lighting, road_surface, violation,  weather_1,lighting,crash_type,bike_ped_involved)
safety<- rbind(ndot, caltrans) %>%
mutate(time=paste0(stri_sub(time, 1, 2),":",stri_sub(time, 3, 4)),
collision_id=as.character(row_number()), id_name=as.character(id_name), date=as.character(date)) %>%
rename(corridor_id=id_name) %>% select(collision_id, everything()) %>%
st_transform(crs=26910) %>%
filter(!is.na(corridor_id))
fgdb_path <- file.path("F:/Research and Analysis/LT Info Monitoring Data/live_data/live_data.gdb")
arc.write(file.path(fgdb_path, "Highway_Collisions_1"), data=safety, overwrite=TRUE)
fgdb_path <- file.path("F:/Research and Analysis/LT Info Monitoring Data/live_data/live_data.gdb")
arc.write(file.path(fgdb_path, "Highway_Collisions_1"), data=safety, overwrite=TRUE)
arc.delete(file.path(fgdb_path, "Highway_Collisions_1"))
arc.delete(file.path(fgdb_path, "Highway_Collisions_1"))
?arc.delete
arc.write(file.path(fgdb_path, "Highway_Collisions_1"), data=safety)
arc.delete(file.path(fgdb_path, "Highway_Collisions_1"))
arc.write(file.path(fgdb_path, "Highway_Collisions_1"), data=safety)
arc.delete(file.path(fgdb_path, "Highway_Collisions_1"))
arc.delete(file.path(fgdb_path, "Highway_Collisions"))
arc.write(file.path(fgdb_path, "Highway_Collisions"), data=safety)
arc.check_product()
use_ArcGIS(pro=TRUE, conda_env = "C:/Program Files/ArcGIS/Pro/bin/Python/envs/arcgispro-py3")
corridors<-st_read("H:/lt-info/work_order_8_18", "corridors") %>%
st_transform(crs=4326) %>%
rename(id_name = CORRIDOR_N)
col.ed <- read_csv("H:/transportation monitoring/safety/switrs/CollisionsAllED.csv") %>% mutate_all(as.character)
col.pla <- read_csv("H:/transportation monitoring/safety/switrs/CollisionsAllPLA.csv") %>% mutate_all(as.character)
switrs <- bind_rows(col.ed, col.pla) %>%
mutate(POINT_X = as.numeric(ifelse(is.na(POINT_X), LONGITUDE, POINT_X)),
POINT_Y = as.numeric(ifelse(is.na(POINT_Y), LATITUDE, POINT_Y)) )%>%
filter(!is.na(POINT_X)) %>%
st_as_sf(coords = c("POINT_X", "POINT_Y"), crs = 4326)
boundary <- geojson_read("https://opendata.arcgis.com/datasets/85a2e8e4bf994742a5855c1339517681_0.geojson", what="sp") %>%
st_as_sf()
trpa<- st_intersection(switrs, boundary)
trpa_clean <- trpa %>% mutate(
crash_severity= case_when(COLLISION_SEVERITY == 1 ~ "fatal",
COLLISION_SEVERITY == 2 ~ "severe injury",
COLLISION_SEVERITY == 3 ~ "other visible injury",
COLLISION_SEVERITY == 4 ~ "complaint of pain",
COLLISION_SEVERITY == 0 ~ "property damage only" ),
crash_type= case_when(TYPE_OF_COLLISION == "A" ~ "Head-On",
TYPE_OF_COLLISION == "B" ~ "Sideswipe",
TYPE_OF_COLLISION == "C" ~ "Rear End",
TYPE_OF_COLLISION == "D" ~ "Angle-Broadside",
TYPE_OF_COLLISION == "E" ~ "Hit Object",
TYPE_OF_COLLISION == "F" ~ "Overturned",
TYPE_OF_COLLISION == "G" ~ "Vehicle/Pedestrian",
TYPE_OF_COLLISION == "H" ~ "Other"),
lighting=case_when(LIGHTING == "A" ~ "Daylight",
LIGHTING == "B" ~ "Dusk - Dawn",
LIGHTING == "C" ~ "Dark - Street Lights",
LIGHTING == "D" ~ "Dark - No Street Lights",
LIGHTING == "E" ~ "Dark - Street Lights Not Functioning",
LIGHTING == "-" ~ "Not Stated"),
weather_1=case_when(WEATHER_1 == "A" ~ "Clear",
WEATHER_1 == "B" ~ "Cloudy",
WEATHER_1 == "C" ~ "Raining",
WEATHER_1 == "D" ~ "Snowing",
WEATHER_1 == "E" ~ "Fog",
WEATHER_1 == "F" ~ "Other",
WEATHER_1 == "G" ~ "Windy",
WEATHER_1== "-" ~ "Not Stated"),
weather_2=case_when(WEATHER_2 == "A" ~ "Clear",
WEATHER_2 == "B" ~ "Cloudy",
WEATHER_2 == "C" ~ "Raining",
WEATHER_2 == "D" ~ "Snowing",
WEATHER_2 == "E" ~ "Fog",
WEATHER_2 == "F" ~ "Other",
WEATHER_2 == "G" ~ "Windy",
WEATHER_2 == "-" ~ "Not Stated"),
violation = case_when( PCF_VIOL_CATEGORY=="0" ~ "Unknown",
PCF_VIOL_CATEGORY=="01" ~ "Driving/Biking Under the Influence",
PCF_VIOL_CATEGORY=="02" ~ "Impeding Traffic",
PCF_VIOL_CATEGORY=="03" ~ "Unsafe Speed",
PCF_VIOL_CATEGORY=="04" ~ "Following Too Closely",
PCF_VIOL_CATEGORY=="05" ~ "Wrong Side of Road",
PCF_VIOL_CATEGORY=="06" ~ "Improper Passing",
PCF_VIOL_CATEGORY=="07" ~ "Unsafe Lane Change",
PCF_VIOL_CATEGORY=="08" ~ "Improper Turning",
PCF_VIOL_CATEGORY=="09" ~ "Auotomobile Right of Way",
PCF_VIOL_CATEGORY=="10" ~ "Pedestrian Right of Way",
PCF_VIOL_CATEGORY=="11" ~ "Pedestrian Violation",
PCF_VIOL_CATEGORY=="12" ~ "Traffic Signals and Signs",
PCF_VIOL_CATEGORY=="13" ~ "Hazardous Parking",
PCF_VIOL_CATEGORY=="17" ~ "Other Hazardous Violation",
PCF_VIOL_CATEGORY=="18" ~ "Other Than Driver or Pedestrian",
PCF_VIOL_CATEGORY=="21" ~ "Unsafe Backing or Starting",
PCF_VIOL_CATEGORY=="22" ~ "Other Improper Driving"),
road_surface = case_when(ROAD_SURFACE== "A" ~ "Dry",
ROAD_SURFACE== "B" ~ "Wet",
ROAD_SURFACE== "C" ~ "Snowy or Icy",
ROAD_SURFACE== "D" ~ "Slippery (Muddy, Oily, etc.)",
ROAD_SURFACE== "-" ~ "Not Stated"),
road_condition_1= case_when(ROAD_COND_1=="A" ~ "Holes, Deep Ruts",
ROAD_COND_1=="B" ~ "Loose Material on Roadway",
ROAD_COND_1=="C" ~ "Obstruction on Roadway",
ROAD_COND_1=="D" ~ "Construction or Repair Zone",
ROAD_COND_1=="E" ~ "Reduced Roadway Width",
ROAD_COND_1=="F" ~ "Flooded",
ROAD_COND_1=="G" ~ "Other",
ROAD_COND_1=="H" ~ "No Unusual Condition",
ROAD_COND_1=="-" ~ "Not Stated"),
road_condition_2= case_when(ROAD_COND_2=="A" ~ "Holes, Deep Ruts",
ROAD_COND_2=="B" ~ "Loose Material on Roadway",
ROAD_COND_2=="C" ~ "Obstruction on Roadway",
ROAD_COND_2=="D" ~ "Construction or Repair Zone",
ROAD_COND_2=="E" ~ "Reduced Roadway Width",
ROAD_COND_2=="F" ~ "Flooded",
ROAD_COND_2=="G" ~ "Other",
ROAD_COND_2=="H" ~ "No Unusual Condition",
ROAD_COND_2=="-" ~ "Not Stated"),
pedestrian= case_when(PED_ACTION=="A" ~ "No Pedestrian Involved",
PED_ACTION=="B" ~ "Crossing in Crosswalk at Intersection",
PED_ACTION=="C" ~ "Crossing in Crosswalk Not at Intersection",
PED_ACTION=="D" ~ "Crossing Not in Crosswalk",
PED_ACTION=="E" ~ "In Road, Including Shoulder",
PED_ACTION=="F" ~ "Not in Road",
PED_ACTION=="G" ~ "Approaching/Leaving School Bus",
PED_ACTION== "-" ~ "Not Stated"),
bike_ped_involved=case_when(PEDESTRIAN_ACCIDENT=="Y" ~ "pedestrian",
BICYCLE_ACCIDENT=="Y" ~ "bicycle",
TRUE~ as.character("none"))) %>%
st_join(corridors) %>%
rename(date= COLLISION_DATE, time=COLLISION_TIME) %>%
mutate(date=as.Date(date, format="%Y-%m-%d"),
data_source="CALTRANS") %>%
select(id_name, data_source,date,time, crash_severity,road_condition_1,road_surface,violation,weather_1,lighting,crash_type,bike_ped_involved)
caltrans <-bind_cols(trpa_clean, data.frame(st_coordinates(trpa_clean))) %>%
rename(lon=X, lat=Y) %>%
data.frame() %>% select(-geometry) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326)
#######
ndot1<-read_csv("H:/lt-info/work_order_8_18/TRPA CRASHES 2012-2017 R HAEFER.csv")
ndot<-read_csv("H:/lt-info/work_order_8_18/TRPA CRASHES 2012-2017 R HAEFER.csv") %>%
filter(!is.na(X)) %>%
st_as_sf(coords = c("X", "Y"), crs = 26911) %>%
st_transform(crs=4326) %>%
st_join(corridors) %>%
separate(Weather, into=c("weather_1", "weather_2"), sep=":") %>%
mutate(crash_type= case_when(`Crash Type`=="ANGLE" ~ "Angle-Broadside",
`Crash Type`=="BACKING" ~ "Backing",
`Crash Type`=="HEAD-ON" ~ "Head-On",
`Crash Type`=="NON-COLLISION" ~ "Non-Collision",
`Crash Type`=="REAR-END" ~ "Rear-End",
`Crash Type`=="REAR-TO-REAR" ~ "Other",
`Crash Type`=="SIDESWIPE, MEETING" ~ "Sideswipe",
`Crash Type`=="SIDESWIPE, OVERTAKING" ~ "Sideswipe",
`Crash Type`=="UNKNOWN" ~ "Unknown",
TRUE ~ NA_character_),
lighting=case_when(Lighting == "DAYLIGHT" ~ "Daylight",
Lighting %in% c ("DARK - CONTINUOUS LIGHTING",
"DARK - SPOT LIGHTING") ~ "Dark - Street Lights",
Lighting == "DARK - NO LIGHTING" ~ "Dark - No Street Lights",
Lighting == "DARK - UNKNOWN LIGHTING" ~ "Dark - Unknown Lighting",
Lighting %in% c ("DAWN","DUSK") ~ "Dusk - Dawn",
Lighting == "NA" ~ "Not Stated",
Lighting %in% c( "UNKNOWN", "OTHER") ~ "Unknown",
TRUE ~ NA_character_),
weather_1 = case_when(weather_1 == "NA" ~ "Not Stated",
weather_1 == "RAIN" ~ "Raining",
weather_1 == "SNOW" ~ "Snowing",
weather_1 == "CLEAR" ~ "Clear",
weather_1 == "CLOUDY" ~ "Cloudy",
weather_1 == "FOG" ~ "Fog",
weather_1 %in% c("UNKNOWN", "OTHER") ~ "Other",
weather_1 == "BLOWING SAND, SOIL, DIRT, SNOW" ~ "Windy",
weather_1 == "FOG, SMOG, SMOKE" ~ "Fog",
TRUE ~ NA_character_),
weather_2 = case_when(weather_2 == "NA" ~ "Not Stated",
weather_2 == "RAIN" ~ "Raining",
weather_2 == "SNOW" ~ "Snowing",
weather_2 == "CLEAR" ~ "Clear",
weather_2 == "CLOUDY" ~ "Cloudy",
weather_2 == "FOG" ~ "Fog",
weather_2 %in% c("UNKNOWN", "OTHER") ~ "Other",
weather_2 == "BLOWING SAND, SOIL, DIRT, SNOW" ~ "Windy",
weather_2 == "FOG, SMOG, SMOKE" ~ "Fog",
TRUE ~ NA_character_),
road_surface = case_when(`Factors Roadway` %in% c("ICE","SNOW","ICE: DRY") ~
"Snowy or Icy",
`Factors Roadway` %in% c("OTHER", "OTHER: DRY") ~
"Other",
`Factors Roadway` == "WET" ~ "Wet",
`Factors Roadway` == "DRY" ~ "Dry",
`Factors Roadway` == "NA" ~ "Not Stated",
TRUE ~ NA_character_),
road_condition_1 = case_when(`HWY Factors` %in% c("WET, ICY, SNOW, SLUSH",
"WEATHER: DEBRIS: ROAD OBSTRUCTION: WET, ICY, SNOW, SLUSH",
"WEATHER: WET, ICY, SNOW, SLUSH",
"WEATHER: WET, ICY, SNOW, SLUSH: OTHER HIGHWAY",
"WEATHER") ~ "Weather",
`HWY Factors` == "UNKNOWN" ~ "Unknown",
`HWY Factors` %in% c("GLARE", "OTHER ENVIRONMENTAL", "OTHER HIGHWAY","SHOULDERS: OTHER HIGHWAY: OTHER ENVIRONMENTAL") ~ "Other",
`HWY Factors` %in% c("DEBRIS", "DEBRIS: ROAD OBSTRUCTION","DEBRIS: ROAD OBSTRUCTION: WET, ICY, SNOW, SLUSH","DEBRIS: WET, ICY, SNOW, SLUSH","ROAD OBSTRUCTION") ~ "Loose Material on Roadway",
`HWY Factors` %in% c("ACTIVE WORK ZONE","INACTIVE WORK ZONE") ~ "Construction or Repair Zone",
`HWY Factors` == "NONE" ~ "No Unusual Condition",
`HWY Factors` %in% c("ANIMAL IN ROADWAY","ANIMAL IN ROADWAY: OTHER HIGHWAY","WET, ICY, SNOW, SLUSH: ANIMAL IN ROADWAY") ~ "Wildlife",
`HWY Factors`== "RUTS, HOLES, BUMPS" ~ "Holes, Deep Ruts",
TRUE ~ NA_character_),
crash_severity = case_when(`Crash Severity`=="FATAL CRASH" ~ "fatal",
`Crash Severity`=="INJURY CRASH" & `Injury Type` =="K" ~ "fatal",
`Crash Severity`=="INJURY CRASH" & `Injury Type` =="A" ~ "severe injury",
`Crash Severity`=="INJURY CRASH" & `Injury Type` =="B" ~ "other visible injury",
`Crash Severity`=="INJURY CRASH" & `Injury Type` =="C" ~ "complaint of pain",
`Crash Severity`=="PROPERTY DAMAGE ONLY" ~ "property damage only", TRUE ~ NA_character_),
violation= stri_trans_totitle(gsub("\\:.*","",`V1 Vehicle Factors`)),
bike_ped_involved=NA) %>%
rename(date=`Crash Date`) %>%
mutate(date=as.Date(date, format="%d-%b-%Y"),
pedestrian=NA,
road_condition_2=NA,
data_source="NDOT",
time=gsub(":" ,"",stri_sub(`Crash Time`, 1, -4))) %>%
select(id_name, data_source, date, time, crash_severity, road_condition_1, lighting, road_surface, violation,  weather_1,lighting,crash_type,bike_ped_involved)
safety<- rbind(ndot, caltrans) %>%
mutate(time=paste0(stri_sub(time, 1, 2),":",stri_sub(time, 3, 4)),
collision_id=as.character(row_number()), id_name=as.character(id_name), date=as.character(date)) %>%
rename(corridor_id=id_name) %>% select(collision_id, everything()) %>%
st_transform(crs=26910) %>%
filter(!is.na(corridor_id))
fgdb_path <- file.path("F:/Research and Analysis/LT Info Monitoring Data/live_data/live_data.gdb")
arc.delete(file.path(fgdb_path, "Highway_Collisions"))
arc.write(file.path(fgdb_path, "Highway_Collisions"), data=safety)
library(pacman)
p_load(sf, tidyverse, geojsonio, stringi, arcpy, arcgisbinding)
library(pacman)
p_load(sf, tidyverse, geojsonio, stringi, arcpy, arcgisbinding)
arc.check_product()
use_ArcGIS(pro=TRUE, conda_env = "C:/Program Files/ArcGIS/Pro/bin/Python/envs/arcgispro-py3")
library(pacman)
p_load(sf, tidyverse, geojsonio, stringi, arcpy, arcgisbinding)
arc.check_product()
use_ArcGIS(pro=TRUE, conda_env = "C:/Program Files/ArcGIS/Pro/bin/Python/envs/arcgispro-py3")
View(tmc_id)
library(pacman)
p_load(dplyr, sf, leaflet , readr, lubridate, ggplot2, arcgisbinding, geojsonio)
tmc_id <- read.csv("H:/transportation monitoring/congestion/inrix data/export1/TMC_Identification.csv")
readings<- read_csv("H:/transportation monitoring/congestion/inrix data/export1/Readings.csv")
### calculate free flow speed as the
ref_speed<-readings %>% group_by(tmc_code) %>% summarise(ref_speed_calc_85= quantile(speed, probs = 0.85, na.rm = TRUE))
inrix.clean <- readings %>%
mutate(date=as.Date(measurement_tstamp, format="%Y-%m-%d %H:%M:%S"),
month=month(date),
year=year(date),
hour= hour(date),
model_period=if_else(between(hour, 7,9), "AM Peak",
if_else(between(hour, 10,15), "Midday Peak",
if_else(between(hour, 16,18), "PM Peak", "Late Night Peak"))),
am_pm = if_else(between(hour, 0, 11), "am", "pm"),
day_name=wday(date, label=T),
day_numeric=mday(date)) %>%
group_by(tmc_code,date) %>%
summarise(speed=mean(speed, na.rm=T) ,travel_time_minutes=mean(travel_time_minutes, na.rm=T)) %>%
left_join(tmc_id, by=c("tmc_code"="tmc")) %>%
left_join(ref_speed, by="tmc_code") %>%
rowwise() %>%
mutate(id=paste(road, direction, intersection, start_latitude, start_longitude, sep="-"),
congestion_index= (speed/ref_speed_calc_85) * 100 - 100,
free_flow_travel_time=(miles/ref_speed_calc_85 * 60),
travel_time_index=(travel_time_minutes/ free_flow_travel_time) * 100 - 100,
delay=travel_time_minutes-free_flow_travel_time)
tmc.spatial<- st_read("H:/transportation monitoring/congestion/inrix data", "TMC_clean_join") %>%
st_transform(crs=26910) %>%
mutate(tmc=as.character(tmc)) %>%
filter(!tmc %in% c("105P07377" ,"105N07377"))
tmc.spatial$id <- tmc.spatial %>% group_indices(tmc)
tmc.spatial1 <- tmc.spatial %>% select(id, road, direction, intersecti) %>%
rename(intersection=intersecti)
test <- tmc.spatial1 %>% mutate(test=paste(road, direction, intersection)) %>%
select(id,test)
inrix.clean$id <- inrix.clean %>% group_indices(tmc_code)
inrix.clean1 <- inrix.clean %>% select(id,congestion_index,date ) %>%
mutate(date=as.character(date))
unique(tmc.spatial1$id)
sort(unique(tmc.spatial1$id))
sort(unique(inrix.clean1$id))
class(inrix.clean1$id)
inrix.clean$id <- inrix.clean %>% group_indices(tmc_code)
congestion_tabular <- inrix.clean %>% select(id,congestion_index,date ) %>%
mutate(date=as.character(date)) %>%
filter(id != 134)
inrix.clean$id <- inrix.clean %>% group_indices(tmc_code)
congestion_tabular <- inrix.clean %>% select(id,congestion_index,date ) %>%
mutate(date=as.character(date)) %>%
filter(id != 134)
View(corridors)
leaflet() %>%
addEsriBasemapLayer(esriBasemapLayers$Gray, autoLabels = TRUE) %>%
addEsriDynamicMapLayer(
url = "https://demographics8.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2018/MapServer")
library(devtools)
install_github("bhaskarvk/leaflet.esri")
library(pacman)
p_load(leaflet.esri, geojsonio,sf)
library(pacman)
p_load(leaflet.esri, geojsonio,sf, leaflet)
leaflet() %>%
addEsriBasemapLayer(esriBasemapLayers$Gray, autoLabels = TRUE) %>%
addEsriDynamicMapLayer(
url = "https://demographics8.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2018/MapServer")
leaflet() %>%
#addEsriBasemapLayer(esriBasemapLayers$Gray, autoLabels = TRUE) %>%
addEsriDynamicMapLayer(
url = "https://demographics8.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2018/MapServer")
devtools::install_github("yonghah/esri2sf")
library(pacman)
p_load(leaflet.esri, geojsonio,sf, leaflet, esri2sf)
library(esri2sf)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidycensus, tidyverse,leaflet, geojsonio, sf, tmap, tmaptools)
census_api_key("680398dff0a2f4c566f10c95888da7f25e55147b")
options(tigris_use_cache = TRUE)
tract <- geojson_read("https://opendata.arcgis.com/datasets/85a2e8e4bf994742a5855c1339517681_3.geojson", what="sp") %>%
st_as_sf()
work_transport <- c(Drive= "B08301_002",
Walk= "B08301_019",
Bike = "B08301_018",
`Public Transport` = "B08301_010",
`Work from Home` = "B08301_021",
Other = "B08301_020",
Motorcycle = "B08301_017",
Taxi = "B08301_016")
nv <- get_acs(geography = "tract", year=2016,
variables =  work_transport,
state = "NV", geometry = TRUE, summary_var = "B08301_001" )
ca <- get_acs(geography = "tract", year=2016,
variables = work_transport, summary_var = "B08301_001",
state = "CA", geometry= TRUE)
all.ca.nv<- rbind(nv, ca)
data<-all.ca.nv  %>%
left_join(data.frame(tract), by="GEOID") %>%
filter(!is.na(STATEFP)) %>%
select(GEOID, NAME.x, variable, estimate, moe, summary_est, summary_moe, County)
tmap_mode("view")
data %>% group_by(GEOID) %>%
filter(variable=="Drive") %>%
mutate(percent=(estimate/summary_est)* 100) %>%
tm_shape() + tm_polygons()
tmap_mode("view")
data %>% group_by(GEOID) %>%
filter(variable=="Drive") %>%
mutate(percent=paste0(estimate/summary_est)* 100), "%") %>%
tmap_mode("view")
data %>% group_by(GEOID) %>%
filter(variable=="Drive") %>%
mutate(percent=paste0((estimate/summary_est)* 100), "%") %>%
tm_shape() + tm_polygons()
tmap_mode("view")
data %>% group_by(GEOID) %>%
filter(variable=="Drive") %>%
mutate(percent=paste0((estimate/summary_est)* 100), "%") %>%
tm_shape() + tm_polygons()
tmap_mode("view")
data %>% group_by(GEOID) %>%
filter(variable=="Drive") %>%
mutate(percent=paste0((estimate/summary_est)* 100, "%")) %>%
tm_shape() + tm_polygons()
tmap_mode("view")
data %>% group_by(GEOID) %>%
filter(variable=="Drive") %>%
mutate(percent=paste0(round((estimate/summary_est)* 100, 1), "%")) %>%
tm_shape() + tm_polygons()
remove.packages
remove.packages('rmarkdown')
devtools::install.github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
library(rmarkdown)
getwd
getwd()
setwd("H:/census/repository")
remove.packages('rmarkdown')
install.packages(c("data.table", "devtools", "digest", "dplyr", "evaluate", "fansi", "gifski", "htmlwidgets", "maptools", "mime", "pacman", "pkgbuild", "pkgload", "ps", "R6", "RApiDatetime", "raster", "Rcpp", "remotes", "rgdal", "rgeos", "rlang", "rstudioapi", "sf", "stringi", "tidyselect", "TTR", "tweenr", "units", "webshot", "zoo"))
